/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/tele-app/properties": {
    /**
     * Get list of property
     * @description Returns list of property
     */
    get: operations["index"];
    /** Create property */
    post: operations["create"];
  };
  "/api/tele-app/properties/{id}": {
    /** Get property by id */
    get: operations["show"];
    /** Update property */
    post: operations["update"];
    /** Delete property */
    delete: operations["delete"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    PropertyRequest: {
      /** @example Rumah dijual di daerah pasteur */
      title?: string;
      /** @example Jl. Pendidikan No. 1 */
      address?: string;
      /** @example Rumah bagus */
      description?: string;
      /** @example 100000 */
      price?: number;
      /** @example 1000 */
      lotSize?: number;
      /** @example 2000 */
      buildingSize?: number;
      /** @example 4 */
      carCount?: number;
      /** @example 3 */
      bedroomCount?: number;
      /** @example 2 */
      bathroomCount?: number;
      /** @example 2 */
      floorCount?: number;
      /** @example 2200 */
      electricPower?: number;
      /** @example Utara */
      facing?: string;
      /** @example SHM */
      ownership?: string;
      /** @example Bandung */
      city?: string;
      pictureUrls?: string[];
      coordinate?: {
        latitude?: number;
        longitude?: number;
      };
      contacts?: {
        name?: string;
        profilePictureURL?: string;
        phoneNumber?: string;
        sourceURL?: string;
        provider?: string;
      };
      /** @example false */
      isPrivate?: boolean;
    };
    UpdatePropertyRequest: {
      /** @example Rumah dijual di daerah pasteur */
      title?: string;
      /** @example Jl. Pendidikan No. 1 */
      address?: string;
      /** @example Rumah bagus */
      description?: string;
      /** @example 100000 */
      price?: number;
      /** @example 1000 */
      lotSize?: number;
      /** @example 2000 */
      buildingSize?: number;
      /** @example 4 */
      carCount?: number;
      /** @example 3 */
      bedroomCount?: number;
      /** @example 2 */
      bathroomCount?: number;
      /** @example 2 */
      floorCount?: number;
      /** @example 2200 */
      electricPower?: number;
      /** @example Utara */
      facing?: string;
      /** @example SHM */
      ownership?: string;
      /** @example Bandung */
      city?: string;
      pictureUrls?: string[];
      coordinate?: {
        latitude?: number;
        longitude?: number;
      };
      contacts?: {
        name?: string;
        profilePictureURL?: string;
        phoneNumber?: string;
        sourceURL?: string;
        provider?: string;
      };
      /** @example false */
      isPrivate?: boolean;
    };
    Property: {
      id?: string;
      title?: string;
      address?: string;
      description?: string;
      price?: number;
      lotSize?: number;
      buildingSize?: number;
      carCount?: number;
      bedroomCount?: number;
      bathroomCount?: number;
      floorCount?: number;
      electricPower?: number;
      facing?: string;
      ownership?: string;
      city?: string;
      pictureUrls?: string[];
      coordinate?: {
        latitude?: number;
        longitude?: number;
      };
      contacts?: {
        name?: string;
        profilePictureURL?: string;
        phoneNumber?: string;
        sourceURL?: string;
        provider?: string;
      };
      userCanEdit?: boolean;
      isPrivate?: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get list of property
   * @description Returns list of property
   */
  index: {
    parameters: {
      query?: {
        /** @description If set to true, it will only return user's collection */
        collection?: boolean;
        /** @description Minimum price */
        "price[min]"?: number;
        /** @description Maximum price */
        "price[max]"?: number;
        /** @description Property type */
        type?: "house" | "apartment" | "land";
        /** @description Bedroom count */
        bedroom_count?: number;
        /** @description Bathroom count */
        bathroom_count?: number;
        /** @description Minimum lot size */
        "lot_size[min]"?: number;
        /** @description Maximum lot size */
        "lot_size[max]"?: number;
        /** @description Minimum building size */
        "building_size[min]"?: number;
        /** @description Maximum building size */
        "building_size[max]"?: number;
        /** @description Ownership */
        ownership?: "shm" | "hgb" | "girik" | "lainnya";
        /** @description Car count */
        car_count?: number;
        /** @description Electric Power */
        electric_power?: number;
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": {
            properties?: components["schemas"]["Property"][];
          };
        };
      };
    };
  };
  /** Create property */
  create: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["UpdatePropertyRequest"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["Property"];
        };
      };
    };
  };
  /** Get property by id */
  show: {
    parameters: {
      path: {
        /** @description Property Id */
        id: string;
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["Property"];
        };
      };
      /** @description Property not found */
      404: {
        content: {
          "application/json": {
            /** @example Property not found */
            error?: string;
          };
        };
      };
    };
  };
  /** Update property */
  update: {
    parameters: {
      path: {
        /** @description Property Id */
        id: string;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["PropertyRequest"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["Property"];
        };
      };
      /** @description Property not found */
      404: {
        content: {
          "application/json": {
            /** @example Property not found */
            error?: string;
          };
        };
      };
    };
  };
  /** Delete property */
  delete: {
    parameters: {
      path: {
        /** @description Property Id */
        id: string;
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": {
            /** @example Property deleted successfully */
            message?: string;
          };
        };
      };
    };
  };
}
